var I=Object.defineProperty;var L=(e,n,o)=>n in e?I(e,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[n]=o;var c=(e,n,o)=>(L(e,typeof n!="symbol"?n+"":n,o),o);(function(){"use strict";class e{}c(e,"MAP_COLUMNS",40),c(e,"MAP_ROWS",25),c(e,"TILE_SIZE",32),c(e,"TILES_MAP_COLUMNS",17);class n{constructor(s,a,t){c(this,"resolvedImages");c(this,"mapJsonURL");c(this,"levelCanvas");c(this,"image");this.levelCanvas=s,this.mapJsonURL=a,this.image=t,this.resolvedImages=[]}render(){const s=this.levelCanvas.getContext("2d");if(s===null){console.log("context is null");return}const a=e.TILE_SIZE,t=e.MAP_COLUMNS;this.tileLoop((i,l)=>{s.drawImage(this.resolvedImages[l*t+i],i*a,l*a)})}async resolveImages(){const s=await this.createBitImageSet();this.resolvedImages=await Promise.all(s)}async createBitImageSet(){const s=[],a=await this.getData();return this.tileLoop((t,i)=>{const l=a[i*e.MAP_COLUMNS+t]-1,r=Math.floor(l/e.TILES_MAP_COLUMNS),m=l-r*e.TILES_MAP_COLUMNS,g=this.cropTileAtlasImage(r,m);s.push(g)}),s}async getData(){return this.mapJsonURL.layers[0].data}cropTileAtlasImage(s,a){const t=e.TILE_SIZE,i={resizeQuality:"pixelated"},l=this.image;return createImageBitmap(l,t*a,t*s,t,t,i)}tileLoop(s){for(let a=0;a<e.MAP_ROWS;a++)for(let t=0;t<e.MAP_COLUMNS;t++)try{s(t,a)}catch{console.trace(`could not execute callback on
 col: ${t}, row: ${a}`);return}}}self.onmessage=async({data:o})=>{const s=o.canvas,a=o.image,t=new n(s,o.levelJsonURL,a);await t.resolveImages(),t.render()}})();
