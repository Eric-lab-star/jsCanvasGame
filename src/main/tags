!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/kyungsubkim/Programming/JS/canvas-game/src/main/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a454f33e/
Bodies	game.ts	/^const { Bodies } = Matter;$/;"	C
Game	game.ts	/^export default class Game extends GameEnv {$/;"	c
MAP_COLUMNS	tileMap.ts	/^  private static MAP_COLUMNS: number = 40;$/;"	p	class:TileMapProps
MAP_ROWS	tileMap.ts	/^  private static MAP_ROWS: number = 25;$/;"	p	class:TileMapProps
TILES_MAP_COLUMNS	tileMap.ts	/^  private static TILES_MAP_COLUMNS: number = 17;$/;"	p	class:TileMapProps
TILE_SIZE	tileMap.ts	/^  private static TILE_SIZE: number = 32;$/;"	p	class:TileMapProps
TileMapProps	tileMap.ts	/^export default class TileMapProps {$/;"	c
box	game.ts	/^    const box = Bodies.rectangle(400, 20, 80, 80);$/;"	C	method:Game.initGameScene
captain	game.ts	/^  private captain: Captain;$/;"	p	class:Game
centerText	game.ts	/^  public centerText(title: string, offsetW: number = 0, offsetH: number = 0) {$/;"	m	class:Game
constructor	game.ts	/^  public constructor() {$/;"	m	class:Game
constructor	tileMap.ts	/^  constructor() {}$/;"	m	class:TileMapProps
ctx	game.ts	/^    const ctx = offcanvas.getContext("2d")!;$/;"	C	method:Game.centerText
game	runner.ts	/^  const game = new Game();$/;"	C	function:runner
getMapColumns	tileMap.ts	/^  public getMapColumns() {$/;"	m	class:TileMapProps
getMapRows	tileMap.ts	/^  public getMapRows() {$/;"	m	class:TileMapProps
getTileSize	tileMap.ts	/^  public getTileSize() {$/;"	m	class:TileMapProps
getTilesMapColumns	tileMap.ts	/^  public getTilesMapColumns() {$/;"	m	class:TileMapProps
ground	game.ts	/^    const ground = Bodies.rectangle($/;"	C	method:Game.initGameScene
initGameScene	game.ts	/^  private initGameScene() {$/;"	m	class:Game
leftWall	game.ts	/^    const leftWall = Bodies.rectangle($/;"	C	method:Game.initGameScene
map	game.ts	/^  private map: Level;$/;"	p	class:Game
offcanvas	game.ts	/^    const offcanvas = document.createElement("canvas");$/;"	C	method:Game.centerText
preload	game.ts	/^  public preload() {$/;"	m	class:Game
render	game.ts	/^  public render() {$/;"	m	class:Game
renderAll	game.ts	/^  public renderAll() {$/;"	m	class:Game
rightWall	game.ts	/^    const rightWall = Bodies.rectangle($/;"	C	method:Game.initGameScene
run	game.ts	/^  public run() {$/;"	m	class:Game
runner	game.ts	/^    const runner = Runner.create();$/;"	C	method:Game.run
runner	runner.ts	/^export function runner() {$/;"	f
start	game.ts	/^  public start() {$/;"	m	class:Game
titleLen	game.ts	/^    const titleLen = ctx.measureText(title);$/;"	C	method:Game.centerText
