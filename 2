import { Bodies, Body, Vector } from "matter-js";
import BodyKeyMaps, { KeyBoardListener } from "../inputs/BodyKeyMaps";
import { randomColor } from "../utilz/helper";

export class HitBox implements KeyBoardListener {
  private body: Body;
  private right: boolean;
  private left: boolean;
  private up: boolean;
  private down: boolean;
  private jumpCounter: number;
  private jumpCooldown: number;
  private didJump: boolean;

  constructor() {
    this.body = this.initBody();
    this.right = false;
    this.left = false;
    this.up = false;
    this.down = false;
    this.jumpCounter = 0;
    this.jumpCooldown = 1;
    this.didJump = false;
  }

  public static withKeyBoardInput() {
    const hitBox = new HitBox();
    const initV = Vector.create(10, 0);
    Body.setVelocity(hitBox.getBody(), initV);
    BodyKeyMaps.keyBoardHanlder(hitBox);
    return hitBox;
  }

  public getBody() {
    return this.body;
  }

  public initBody() {
    const box = Bodies.rectangle(10, 10, 30, 40, {
      render: {
        fillStyle: randomColor(),
        opacity: 1,
      },
    });
    Body.setSpeed(box, 10);

    return box;
  }

  public move() {
    // console.log(Body.getVelocity(this.body).y);
    let newV = Vector.create(0, 0);
    if (this.body.position.y <= 700) {
      console.log(this.body.position.y);
      Vector.add(newV, Vector.create(0, 10));
    }

    if (this.right) {
      const rightV = Vector.create(3, 0);
      newV = Vector.add(newV, rightV);
      console.log(newV.y);
    }

    if (this.left) {
      const leftV = Vector.create(-3, 0);
      newV = Vector.add(newV, leftV);
    }

    if (this.up) {
      if (this.didJump) {
        return;
      }
      this.jumpCounter++;
      const upV =
        this.jumpCounter > 2 ? Vector.create(0, 0) : Vector.create(0, -10);
      newV = Vector.add(newV, upV);
      this.didJump = true;
      this.startJumpCoolDown();
    }

    if (this.down) {
      const downV = Vector.create(0, 3);
      newV = Vector.add(newV, downV);
    }

    Body.setVelocity(this.body, newV);
  }

  public reset(keyCode: string) {
    console.log(keyCode);
  }

  public startJumpCoolDown() {
    window.setTimeout(() => {
      this.jumpCounter = 0;
      this.didJump = false;
    }, this.jumpCooldown * 1000);
  }

  public setRight(value: boolean) {
    this.right = value;
  }
  public setLeft(value: boolean) {
    this.left = value;
  }
  public setUp(value: boolean) {
    this.up = value;
  }
  public setDown(value: boolean) {
    this.down = value;
  }
}
